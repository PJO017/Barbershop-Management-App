// Generated by view binder compiler. Do not edit!
package com.example.barbershopmanagementapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.barbershopmanagementapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPaymentBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView CVCLabel;

  @NonNull
  public final TextView appointmentLabel;

  @NonNull
  public final TextView appointmentTV;

  @NonNull
  public final TextView barberLabel;

  @NonNull
  public final TextView barberTV;

  @NonNull
  public final EditText cardNumber;

  @NonNull
  public final TextView cardNumberLabel;

  @NonNull
  public final LinearLayout dateAndCVVET;

  @NonNull
  public final LinearLayout dateAndCVVLabels;

  @NonNull
  public final TextView dateLabel;

  @NonNull
  public final EditText dayET;

  @NonNull
  public final TextView divider;

  @NonNull
  public final TextView hairstyleLabel;

  @NonNull
  public final TextView hairstyleTV;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final EditText monthET;

  @NonNull
  public final EditText name;

  @NonNull
  public final TextView nameLabel;

  @NonNull
  public final Button payButton;

  @NonNull
  public final LinearLayout payementLinearLayout;

  @NonNull
  public final CardView paymentDetailsCard;

  @NonNull
  public final TextView paymentDetailsTitle;

  @NonNull
  public final TextView paymentTitle;

  @NonNull
  public final TextView priceTV;

  @NonNull
  public final CardView serviceCard;

  @NonNull
  public final TextView serviceLabel;

  @NonNull
  public final Toolbar toolbar;

  private ActivityPaymentBinding(@NonNull LinearLayout rootView, @NonNull TextView CVCLabel,
      @NonNull TextView appointmentLabel, @NonNull TextView appointmentTV,
      @NonNull TextView barberLabel, @NonNull TextView barberTV, @NonNull EditText cardNumber,
      @NonNull TextView cardNumberLabel, @NonNull LinearLayout dateAndCVVET,
      @NonNull LinearLayout dateAndCVVLabels, @NonNull TextView dateLabel, @NonNull EditText dayET,
      @NonNull TextView divider, @NonNull TextView hairstyleLabel, @NonNull TextView hairstyleTV,
      @NonNull LinearLayout linearLayout, @NonNull EditText monthET, @NonNull EditText name,
      @NonNull TextView nameLabel, @NonNull Button payButton,
      @NonNull LinearLayout payementLinearLayout, @NonNull CardView paymentDetailsCard,
      @NonNull TextView paymentDetailsTitle, @NonNull TextView paymentTitle,
      @NonNull TextView priceTV, @NonNull CardView serviceCard, @NonNull TextView serviceLabel,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.CVCLabel = CVCLabel;
    this.appointmentLabel = appointmentLabel;
    this.appointmentTV = appointmentTV;
    this.barberLabel = barberLabel;
    this.barberTV = barberTV;
    this.cardNumber = cardNumber;
    this.cardNumberLabel = cardNumberLabel;
    this.dateAndCVVET = dateAndCVVET;
    this.dateAndCVVLabels = dateAndCVVLabels;
    this.dateLabel = dateLabel;
    this.dayET = dayET;
    this.divider = divider;
    this.hairstyleLabel = hairstyleLabel;
    this.hairstyleTV = hairstyleTV;
    this.linearLayout = linearLayout;
    this.monthET = monthET;
    this.name = name;
    this.nameLabel = nameLabel;
    this.payButton = payButton;
    this.payementLinearLayout = payementLinearLayout;
    this.paymentDetailsCard = paymentDetailsCard;
    this.paymentDetailsTitle = paymentDetailsTitle;
    this.paymentTitle = paymentTitle;
    this.priceTV = priceTV;
    this.serviceCard = serviceCard;
    this.serviceLabel = serviceLabel;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPaymentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPaymentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_payment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPaymentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.CVCLabel;
      TextView CVCLabel = ViewBindings.findChildViewById(rootView, id);
      if (CVCLabel == null) {
        break missingId;
      }

      id = R.id.appointmentLabel;
      TextView appointmentLabel = ViewBindings.findChildViewById(rootView, id);
      if (appointmentLabel == null) {
        break missingId;
      }

      id = R.id.appointmentTV;
      TextView appointmentTV = ViewBindings.findChildViewById(rootView, id);
      if (appointmentTV == null) {
        break missingId;
      }

      id = R.id.barberLabel;
      TextView barberLabel = ViewBindings.findChildViewById(rootView, id);
      if (barberLabel == null) {
        break missingId;
      }

      id = R.id.barberTV;
      TextView barberTV = ViewBindings.findChildViewById(rootView, id);
      if (barberTV == null) {
        break missingId;
      }

      id = R.id.cardNumber;
      EditText cardNumber = ViewBindings.findChildViewById(rootView, id);
      if (cardNumber == null) {
        break missingId;
      }

      id = R.id.cardNumberLabel;
      TextView cardNumberLabel = ViewBindings.findChildViewById(rootView, id);
      if (cardNumberLabel == null) {
        break missingId;
      }

      id = R.id.dateAndCVVET;
      LinearLayout dateAndCVVET = ViewBindings.findChildViewById(rootView, id);
      if (dateAndCVVET == null) {
        break missingId;
      }

      id = R.id.dateAndCVVLabels;
      LinearLayout dateAndCVVLabels = ViewBindings.findChildViewById(rootView, id);
      if (dateAndCVVLabels == null) {
        break missingId;
      }

      id = R.id.dateLabel;
      TextView dateLabel = ViewBindings.findChildViewById(rootView, id);
      if (dateLabel == null) {
        break missingId;
      }

      id = R.id.dayET;
      EditText dayET = ViewBindings.findChildViewById(rootView, id);
      if (dayET == null) {
        break missingId;
      }

      id = R.id.divider;
      TextView divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.hairstyleLabel;
      TextView hairstyleLabel = ViewBindings.findChildViewById(rootView, id);
      if (hairstyleLabel == null) {
        break missingId;
      }

      id = R.id.hairstyleTV;
      TextView hairstyleTV = ViewBindings.findChildViewById(rootView, id);
      if (hairstyleTV == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.monthET;
      EditText monthET = ViewBindings.findChildViewById(rootView, id);
      if (monthET == null) {
        break missingId;
      }

      id = R.id.name;
      EditText name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.nameLabel;
      TextView nameLabel = ViewBindings.findChildViewById(rootView, id);
      if (nameLabel == null) {
        break missingId;
      }

      id = R.id.payButton;
      Button payButton = ViewBindings.findChildViewById(rootView, id);
      if (payButton == null) {
        break missingId;
      }

      id = R.id.payementLinearLayout;
      LinearLayout payementLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (payementLinearLayout == null) {
        break missingId;
      }

      id = R.id.paymentDetailsCard;
      CardView paymentDetailsCard = ViewBindings.findChildViewById(rootView, id);
      if (paymentDetailsCard == null) {
        break missingId;
      }

      id = R.id.paymentDetailsTitle;
      TextView paymentDetailsTitle = ViewBindings.findChildViewById(rootView, id);
      if (paymentDetailsTitle == null) {
        break missingId;
      }

      id = R.id.paymentTitle;
      TextView paymentTitle = ViewBindings.findChildViewById(rootView, id);
      if (paymentTitle == null) {
        break missingId;
      }

      id = R.id.priceTV;
      TextView priceTV = ViewBindings.findChildViewById(rootView, id);
      if (priceTV == null) {
        break missingId;
      }

      id = R.id.serviceCard;
      CardView serviceCard = ViewBindings.findChildViewById(rootView, id);
      if (serviceCard == null) {
        break missingId;
      }

      id = R.id.serviceLabel;
      TextView serviceLabel = ViewBindings.findChildViewById(rootView, id);
      if (serviceLabel == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityPaymentBinding((LinearLayout) rootView, CVCLabel, appointmentLabel,
          appointmentTV, barberLabel, barberTV, cardNumber, cardNumberLabel, dateAndCVVET,
          dateAndCVVLabels, dateLabel, dayET, divider, hairstyleLabel, hairstyleTV, linearLayout,
          monthET, name, nameLabel, payButton, payementLinearLayout, paymentDetailsCard,
          paymentDetailsTitle, paymentTitle, priceTV, serviceCard, serviceLabel, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
